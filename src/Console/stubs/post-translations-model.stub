<?php

namespace $CLASS_NAMESPACE$;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\Storage;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Post extends \$BASE_MODEL$
{
    use HasFactory;

    protected $fillable = [
        'post_category_id', 'author_id', 'picture',
        'published_at', 'date_ico', 'is_trending_now', 'views', 'media_type'
    ];

    protected $dates = [
        'published_at'
    ];

    /**
    * Relations
    */

    public function author(): BelongsTo
    {
        return $this->belongsTo(
            User::class,
            'author_id',
        );
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(
            PostCategory::class,
            'post_category_id',
            'id',
        );
    }

    public function tags(): BelongsToMany
    {
        return $this->belongsToMany(
            PostTag::class,
            'post_post_tag',
            'post_id',
            'post_tag_id',
        );
    }

    public function translations(): BelongsToMany
    {
        return $this->belongsToMany(Language::class, 'post_language', 'post_id', 'language_code')
                ->withPivot(['title', 'content', 'short_title', 'short_content']);
    }


    /**
    * Methods
    */

    public function isPublished(): bool
    {
        return null !== $this->published_at;
    }

    public function isStep1Completed(): bool
    {
        return (bool)$this->post_category_id;
    }

    public function isStep2Completed(): bool
    {
        $filled = true;

        foreach (Language::all() as $language) {
            $filled = $filled && $this
                    ->translations()
                    ->where('language_code', $language->code)
                    ->wherePivot('title','!=','null')
                    ->wherePivot('content','!=','null')
                    ->exists();
        }

        return $filled;
    }

    public function isStep3Completed(): bool
    {
        $filled = true;

        foreach (Language::all() as $language) {
            $filled = $filled && $this
                    ->translations()
                    ->where('language_code', $language->code)
                    ->wherePivot('short_title','!=','null')
                    ->wherePivot('short_content','!=','null')
                    ->exists();
        }

        return $filled;
    }

    public function isStep4Completed(): bool
    {
        return (bool)$this->picture;
    }

    public function publishable(): bool
    {
        return $this->isStep1Completed()
            && $this->isStep2Completed()
            && $this->isStep3Completed()
            && $this->isStep4Completed();
    }

    public function originalImage(): string
    {
        return Storage::url(config('alphanews.posts.filesystem.original_images_path') . '/' . $this->picture);
    }

    public function previewImage(): string
    {
        return Storage::url(config('alphanews.posts.filesystem.preview_images_path') . '/' . $this->picture);
    }

}
