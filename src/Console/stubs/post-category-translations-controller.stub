<?php

namespace $CLASS_NAMESPACE$;

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use $MODELS_NAMESPACE$\PostCategory;
use $MODELS_NAMESPACE$\Language;

class PostCategoryController extends \$BASE_CONTROLLER$
{
    public function index(?PostCategory $postCategory): View|Factory|Application
    {
        $postCategories = PostCategory::where(
            'post_category_id',
            $postCategory?->id
        )
            ->withCount('childCategories')
            ->withCount(['posts'])
            ->with(['translations' => static function ($query) {
                $query->select('code');
            }])
            ->latest()
            ->paginate();

        return $this->view('post-category.index', [
            'categories' => $postCategories,
            'rootCategory' => $postCategory,
        ]);
    }

    public function create(): Factory|View|Application
    {
        $categories = PostCategory::with('translations')->get();

        return $this->view('post-category.create', [
            'categories' => $categories,
        ]);
    }

    public function store(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'color' => 'required|string|max:255',
            'post_category_id' => 'nullable|exists:post_categories,id',
        ]);
        $postCategory = PostCategory::create([
            'color' => $validated['color'],
            'post_category_id' => $validated['post_category_id'] ?? null
        ]);
        $this->showSuccessMessage('Category successfully created.');

        return redirect()->route('$MODULE_NAME$.post-category.edit', $postCategory->id);
    }

    public function edit(Request $request, PostCategory $postCategory): Factory|View|Application
    {
        $languageCode = $request->get('language_code', config('alphanews.default_language'));
        $languages = Language::all();
        $language = Language::where('code', $languageCode)->first();

        $postCategory->load(['translations' => static function ($query) use ($languageCode) {
            $query->where('code', $languageCode);
        }]);

        return $this->view('post-category.edit', [
            'postCategory' => $postCategory,
            'categories' => PostCategory::whereNotIn('id', [$postCategory->id])
                ->with(['translations' => static function ($query) use ($languageCode) {
                    $query->where('code', $languageCode);
                }])->get(),
            'languages' => $languages,
            'language' => $language,
        ]);
    }

    public function update(Request $request, PostCategory $postCategory): RedirectResponse
    {
        $validated = $request->validate([
            'color' => 'string|max:255',
        ]);
        $postCategory->update($validated);
        $this->showSuccessMessage('Category successfully updated.');

        return back();
    }

    public function updateTranslatedFields(Request $request, PostCategory $postCategory): RedirectResponse
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'language_code' => 'required|exists:languages,code'
        ]);
        $postCategory
            ->translations()
            ->syncWithoutDetaching([$validated['language_code'] => $validated['name']]);
        $this->showSuccessMessage('Post category updated successfully.');
        return back();
    }

    public function destroy(PostCategory $postCategory): RedirectResponse
    {
        if ($postCategory->posts()->exists()) {
            $this->showWarningMessage('Can not delete category with posts');
        } elseif ($postCategory->childCategories()->exists()) {
            $this->showWarningMessage('Can not delete parent category');
        } else {
            $postCategory->delete();
            $this->showSuccessMessage('Category successfully deleted');
        }

        return back();
    }
}
